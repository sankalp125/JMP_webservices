/*
 * Application API
 * Application API for managing countries, states, cities, user authentication, profiles, and products.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV1NormalRegisterPost201Response;
import org.openapitools.client.model.ApiV1NormalRegisterPost400Response;
import org.openapitools.client.model.ApiV1NormalRequestPasswordResetPost200Response;
import org.openapitools.client.model.ApiV1NormalResendOtpPost200Response;
import org.openapitools.client.model.ApiV1NormalResetPasswordPost200Response;
import org.openapitools.client.model.ApiV1ProtectedAddProductPicturePut200Response;
import org.openapitools.client.model.ApiV1ProtectedAddProductPost201Response;
import org.openapitools.client.model.ApiV1ProtectedAddProductPost202Response;
import org.openapitools.client.model.ApiV1ProtectedDeleteProductDelete200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdatePasswordPut200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdateProductPut200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdateProfileDetailsPut200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdateProfilePicturePut200Response;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.City;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.PasswordResetRequestDto;
import org.openapitools.client.model.PasswordResetVerifyDto;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductDetailsDto;
import org.openapitools.client.model.State;
import org.openapitools.client.model.TokenRefreshRequestDto;
import org.openapitools.client.model.TokenRefreshResponseDto;
import java.util.UUID;
import org.openapitools.client.model.UpdatePasswordDto;
import org.openapitools.client.model.UpdateProductDto;
import org.openapitools.client.model.UpdateProfileDetailsDto;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserLoginDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get Cities by State ID
     *
     * Fetches a list of cities for the specified state UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalCitiesStateIdGetTest() throws ApiException {
        UUID stateId = null;
        List<City> response = api.apiV1NormalCitiesStateIdGet(stateId);
        // TODO: test validations
    }

    /**
     * Get All Countries
     *
     * Fetches a list of all countries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalCountriesGetTest() throws ApiException {
        List<Country> response = api.apiV1NormalCountriesGet();
        // TODO: test validations
    }

    /**
     * Get All Categories
     *
     * Fetches a list of all categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalGetCategoriesGetTest() throws ApiException {
        List<Category> response = api.apiV1NormalGetCategoriesGet();
        // TODO: test validations
    }

    /**
     * User Login
     *
     * Authenticates a user and returns access and refresh tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalLoginPostTest() throws ApiException {
        UserLoginDto userLoginDto = null;
        LoginResponse response = api.apiV1NormalLoginPost(userLoginDto);
        // TODO: test validations
    }

    /**
     * Refresh Access Token
     *
     * Generates a new access and refresh token using a valid refresh token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalRefreshTokenPostTest() throws ApiException {
        TokenRefreshRequestDto tokenRefreshRequestDto = null;
        TokenRefreshResponseDto response = api.apiV1NormalRefreshTokenPost(tokenRefreshRequestDto);
        // TODO: test validations
    }

    /**
     * Register a new user
     *
     * Registers a new user with provided details and optional profile photo.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalRegisterPostTest() throws ApiException {
        String name = null;
        String email = null;
        String password = null;
        String mobileNo = null;
        String country = null;
        String state = null;
        String city = null;
        File photo = null;
        ApiV1NormalRegisterPost201Response response = api.apiV1NormalRegisterPost(name, email, password, mobileNo, country, state, city, photo);
        // TODO: test validations
    }

    /**
     * Request Password Reset
     *
     * Sends an OTP to the user&#39;s email for password reset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalRequestPasswordResetPostTest() throws ApiException {
        PasswordResetRequestDto passwordResetRequestDto = null;
        ApiV1NormalRequestPasswordResetPost200Response response = api.apiV1NormalRequestPasswordResetPost(passwordResetRequestDto);
        // TODO: test validations
    }

    /**
     * Resend OTP for Password Reset
     *
     * Resends an OTP to the user&#39;s email for password reset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalResendOtpPostTest() throws ApiException {
        PasswordResetRequestDto passwordResetRequestDto = null;
        ApiV1NormalResendOtpPost200Response response = api.apiV1NormalResendOtpPost(passwordResetRequestDto);
        // TODO: test validations
    }

    /**
     * Reset Password
     *
     * Resets the user&#39;s password using the provided OTP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalResetPasswordPostTest() throws ApiException {
        PasswordResetVerifyDto passwordResetVerifyDto = null;
        ApiV1NormalResetPasswordPost200Response response = api.apiV1NormalResetPasswordPost(passwordResetVerifyDto);
        // TODO: test validations
    }

    /**
     * Get States by Country ID
     *
     * Fetches a list of states for the specified country UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NormalStatesCountryIdGetTest() throws ApiException {
        UUID countryId = null;
        List<State> response = api.apiV1NormalStatesCountryIdGet(countryId);
        // TODO: test validations
    }

    /**
     * Add Product Picture
     *
     * Adds a new picture to an existing product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedAddProductPicturePutTest() throws ApiException {
        UUID productId = null;
        File photo = null;
        ApiV1ProtectedAddProductPicturePut200Response response = api.apiV1ProtectedAddProductPicturePut(productId, photo);
        // TODO: test validations
    }

    /**
     * Add a New Product
     *
     * Adds a new product with details and optional images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedAddProductPostTest() throws ApiException {
        String productName = null;
        String category = null;
        String description = null;
        Double price = null;
        String tillDate = null;
        String country = null;
        String state = null;
        String city = null;
        File picture = null;
        List<File> files = null;
        Boolean active = null;
        ApiV1ProtectedAddProductPost201Response response = api.apiV1ProtectedAddProductPost(productName, category, description, price, tillDate, country, state, city, picture, files, active);
        // TODO: test validations
    }

    /**
     * Delete Product
     *
     * Deletes a specific product and its associated pictures.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedDeleteProductDeleteTest() throws ApiException {
        ProductDetailsDto productDetailsDto = null;
        ApiV1ProtectedDeleteProductDelete200Response response = api.apiV1ProtectedDeleteProductDelete(productDetailsDto);
        // TODO: test validations
    }

    /**
     * Get Product Details
     *
     * Fetches details of a specific product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedProductDetailsGetTest() throws ApiException {
        ProductDetailsDto productDetailsDto = null;
        Product response = api.apiV1ProtectedProductDetailsGet(productDetailsDto);
        // TODO: test validations
    }

    /**
     * Get Product List
     *
     * Fetches a list of all products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedProductListGetTest() throws ApiException {
        List<Product> response = api.apiV1ProtectedProductListGet();
        // TODO: test validations
    }

    /**
     * Get User Profile
     *
     * Fetches the profile details of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedProfileGetTest() throws ApiException {
        User response = api.apiV1ProtectedProfileGet();
        // TODO: test validations
    }

    /**
     * Update User Password
     *
     * Updates the password of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedUpdatePasswordPutTest() throws ApiException {
        UpdatePasswordDto updatePasswordDto = null;
        ApiV1ProtectedUpdatePasswordPut200Response response = api.apiV1ProtectedUpdatePasswordPut(updatePasswordDto);
        // TODO: test validations
    }

    /**
     * Update Product Details
     *
     * Updates the details of a specific product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedUpdateProductPutTest() throws ApiException {
        UpdateProductDto updateProductDto = null;
        ApiV1ProtectedUpdateProductPut200Response response = api.apiV1ProtectedUpdateProductPut(updateProductDto);
        // TODO: test validations
    }

    /**
     * Update User Profile Details
     *
     * Updates the profile details of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedUpdateProfileDetailsPutTest() throws ApiException {
        UpdateProfileDetailsDto updateProfileDetailsDto = null;
        ApiV1ProtectedUpdateProfileDetailsPut200Response response = api.apiV1ProtectedUpdateProfileDetailsPut(updateProfileDetailsDto);
        // TODO: test validations
    }

    /**
     * Update User Profile Picture
     *
     * Updates the profile picture of the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ProtectedUpdateProfilePicturePutTest() throws ApiException {
        File photo = null;
        ApiV1ProtectedUpdateProfilePicturePut200Response response = api.apiV1ProtectedUpdateProfilePicturePut(photo);
        // TODO: test validations
    }

}
