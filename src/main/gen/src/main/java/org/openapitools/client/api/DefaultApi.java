/*
 * Application API
 * Application API for managing countries, states, cities, user authentication, profiles, and products.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV1NormalRegisterPost201Response;
import org.openapitools.client.model.ApiV1NormalRegisterPost400Response;
import org.openapitools.client.model.ApiV1NormalRequestPasswordResetPost200Response;
import org.openapitools.client.model.ApiV1NormalResendOtpPost200Response;
import org.openapitools.client.model.ApiV1NormalResetPasswordPost200Response;
import org.openapitools.client.model.ApiV1ProtectedAddProductPicturePut200Response;
import org.openapitools.client.model.ApiV1ProtectedAddProductPost201Response;
import org.openapitools.client.model.ApiV1ProtectedAddProductPost202Response;
import org.openapitools.client.model.ApiV1ProtectedDeleteProductDelete200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdatePasswordPut200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdateProductPut200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdateProfileDetailsPut200Response;
import org.openapitools.client.model.ApiV1ProtectedUpdateProfilePicturePut200Response;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.City;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.PasswordResetRequestDto;
import org.openapitools.client.model.PasswordResetVerifyDto;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductDetailsDto;
import org.openapitools.client.model.State;
import org.openapitools.client.model.TokenRefreshRequestDto;
import org.openapitools.client.model.TokenRefreshResponseDto;
import java.util.UUID;
import org.openapitools.client.model.UpdatePasswordDto;
import org.openapitools.client.model.UpdateProductDto;
import org.openapitools.client.model.UpdateProfileDetailsDto;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserLoginDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1NormalCitiesStateIdGet
     * @param stateId UUID of the state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cities retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid stateId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No cities found for given state ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalCitiesStateIdGetCall(UUID stateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/normal/cities/{stateId}"
            .replace("{" + "stateId" + "}", localVarApiClient.escapeString(stateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalCitiesStateIdGetValidateBeforeCall(UUID stateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stateId' is set
        if (stateId == null) {
            throw new ApiException("Missing the required parameter 'stateId' when calling apiV1NormalCitiesStateIdGet(Async)");
        }

        return apiV1NormalCitiesStateIdGetCall(stateId, _callback);

    }

    /**
     * Get Cities by State ID
     * Fetches a list of cities for the specified state UUID.
     * @param stateId UUID of the state (required)
     * @return List&lt;City&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cities retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid stateId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No cities found for given state ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<City> apiV1NormalCitiesStateIdGet(UUID stateId) throws ApiException {
        ApiResponse<List<City>> localVarResp = apiV1NormalCitiesStateIdGetWithHttpInfo(stateId);
        return localVarResp.getData();
    }

    /**
     * Get Cities by State ID
     * Fetches a list of cities for the specified state UUID.
     * @param stateId UUID of the state (required)
     * @return ApiResponse&lt;List&lt;City&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cities retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid stateId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No cities found for given state ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<City>> apiV1NormalCitiesStateIdGetWithHttpInfo(UUID stateId) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalCitiesStateIdGetValidateBeforeCall(stateId, null);
        Type localVarReturnType = new TypeToken<List<City>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Cities by State ID (asynchronously)
     * Fetches a list of cities for the specified state UUID.
     * @param stateId UUID of the state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of cities retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid stateId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No cities found for given state ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalCitiesStateIdGetAsync(UUID stateId, final ApiCallback<List<City>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalCitiesStateIdGetValidateBeforeCall(stateId, _callback);
        Type localVarReturnType = new TypeToken<List<City>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalCountriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalCountriesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/normal/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalCountriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1NormalCountriesGetCall(_callback);

    }

    /**
     * Get All Countries
     * Fetches a list of all countries.
     * @return List&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Country> apiV1NormalCountriesGet() throws ApiException {
        ApiResponse<List<Country>> localVarResp = apiV1NormalCountriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get All Countries
     * Fetches a list of all countries.
     * @return ApiResponse&lt;List&lt;Country&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Country>> apiV1NormalCountriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalCountriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Countries (asynchronously)
     * Fetches a list of all countries.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalCountriesGetAsync(final ApiCallback<List<Country>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalCountriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalGetCategoriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of categories retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalGetCategoriesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/normal/get_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalGetCategoriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1NormalGetCategoriesGetCall(_callback);

    }

    /**
     * Get All Categories
     * Fetches a list of all categories.
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of categories retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Category> apiV1NormalGetCategoriesGet() throws ApiException {
        ApiResponse<List<Category>> localVarResp = apiV1NormalGetCategoriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get All Categories
     * Fetches a list of all categories.
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of categories retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Category>> apiV1NormalGetCategoriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalGetCategoriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Categories (asynchronously)
     * Fetches a list of all categories.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of categories retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalGetCategoriesGetAsync(final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalGetCategoriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalLoginPost
     * @param userLoginDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful, returns access and refresh tokens. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid credentials. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalLoginPostCall(UserLoginDto userLoginDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userLoginDto;

        // create path and map variables
        String localVarPath = "/api/v1/normal/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalLoginPostValidateBeforeCall(UserLoginDto userLoginDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userLoginDto' is set
        if (userLoginDto == null) {
            throw new ApiException("Missing the required parameter 'userLoginDto' when calling apiV1NormalLoginPost(Async)");
        }

        return apiV1NormalLoginPostCall(userLoginDto, _callback);

    }

    /**
     * User Login
     * Authenticates a user and returns access and refresh tokens.
     * @param userLoginDto  (required)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful, returns access and refresh tokens. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid credentials. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse apiV1NormalLoginPost(UserLoginDto userLoginDto) throws ApiException {
        ApiResponse<LoginResponse> localVarResp = apiV1NormalLoginPostWithHttpInfo(userLoginDto);
        return localVarResp.getData();
    }

    /**
     * User Login
     * Authenticates a user and returns access and refresh tokens.
     * @param userLoginDto  (required)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful, returns access and refresh tokens. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid credentials. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> apiV1NormalLoginPostWithHttpInfo(UserLoginDto userLoginDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalLoginPostValidateBeforeCall(userLoginDto, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User Login (asynchronously)
     * Authenticates a user and returns access and refresh tokens.
     * @param userLoginDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful, returns access and refresh tokens. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid credentials. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalLoginPostAsync(UserLoginDto userLoginDto, final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalLoginPostValidateBeforeCall(userLoginDto, _callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalRefreshTokenPost
     * @param tokenRefreshRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tokens refreshed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or expired refresh token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalRefreshTokenPostCall(TokenRefreshRequestDto tokenRefreshRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenRefreshRequestDto;

        // create path and map variables
        String localVarPath = "/api/v1/normal/refresh-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalRefreshTokenPostValidateBeforeCall(TokenRefreshRequestDto tokenRefreshRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenRefreshRequestDto' is set
        if (tokenRefreshRequestDto == null) {
            throw new ApiException("Missing the required parameter 'tokenRefreshRequestDto' when calling apiV1NormalRefreshTokenPost(Async)");
        }

        return apiV1NormalRefreshTokenPostCall(tokenRefreshRequestDto, _callback);

    }

    /**
     * Refresh Access Token
     * Generates a new access and refresh token using a valid refresh token.
     * @param tokenRefreshRequestDto  (required)
     * @return TokenRefreshResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tokens refreshed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or expired refresh token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TokenRefreshResponseDto apiV1NormalRefreshTokenPost(TokenRefreshRequestDto tokenRefreshRequestDto) throws ApiException {
        ApiResponse<TokenRefreshResponseDto> localVarResp = apiV1NormalRefreshTokenPostWithHttpInfo(tokenRefreshRequestDto);
        return localVarResp.getData();
    }

    /**
     * Refresh Access Token
     * Generates a new access and refresh token using a valid refresh token.
     * @param tokenRefreshRequestDto  (required)
     * @return ApiResponse&lt;TokenRefreshResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tokens refreshed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or expired refresh token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenRefreshResponseDto> apiV1NormalRefreshTokenPostWithHttpInfo(TokenRefreshRequestDto tokenRefreshRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalRefreshTokenPostValidateBeforeCall(tokenRefreshRequestDto, null);
        Type localVarReturnType = new TypeToken<TokenRefreshResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh Access Token (asynchronously)
     * Generates a new access and refresh token using a valid refresh token.
     * @param tokenRefreshRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tokens refreshed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or expired refresh token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalRefreshTokenPostAsync(TokenRefreshRequestDto tokenRefreshRequestDto, final ApiCallback<TokenRefreshResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalRefreshTokenPostValidateBeforeCall(tokenRefreshRequestDto, _callback);
        Type localVarReturnType = new TypeToken<TokenRefreshResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalRegisterPost
     * @param name  (required)
     * @param email  (required)
     * @param password  (required)
     * @param mobileNo  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param photo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or photo upload failed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - User already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalRegisterPostCall(String name, String email, String password, String mobileNo, String country, String state, String city, File photo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/normal/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (mobileNo != null) {
            localVarFormParams.put("mobileNo", mobileNo);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (photo != null) {
            localVarFormParams.put("photo", photo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalRegisterPostValidateBeforeCall(String name, String email, String password, String mobileNo, String country, String state, String city, File photo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiV1NormalRegisterPost(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling apiV1NormalRegisterPost(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling apiV1NormalRegisterPost(Async)");
        }

        // verify the required parameter 'mobileNo' is set
        if (mobileNo == null) {
            throw new ApiException("Missing the required parameter 'mobileNo' when calling apiV1NormalRegisterPost(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling apiV1NormalRegisterPost(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling apiV1NormalRegisterPost(Async)");
        }

        // verify the required parameter 'city' is set
        if (city == null) {
            throw new ApiException("Missing the required parameter 'city' when calling apiV1NormalRegisterPost(Async)");
        }

        return apiV1NormalRegisterPostCall(name, email, password, mobileNo, country, state, city, photo, _callback);

    }

    /**
     * Register a new user
     * Registers a new user with provided details and optional profile photo.
     * @param name  (required)
     * @param email  (required)
     * @param password  (required)
     * @param mobileNo  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param photo  (optional)
     * @return ApiV1NormalRegisterPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or photo upload failed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - User already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1NormalRegisterPost201Response apiV1NormalRegisterPost(String name, String email, String password, String mobileNo, String country, String state, String city, File photo) throws ApiException {
        ApiResponse<ApiV1NormalRegisterPost201Response> localVarResp = apiV1NormalRegisterPostWithHttpInfo(name, email, password, mobileNo, country, state, city, photo);
        return localVarResp.getData();
    }

    /**
     * Register a new user
     * Registers a new user with provided details and optional profile photo.
     * @param name  (required)
     * @param email  (required)
     * @param password  (required)
     * @param mobileNo  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param photo  (optional)
     * @return ApiResponse&lt;ApiV1NormalRegisterPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or photo upload failed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - User already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1NormalRegisterPost201Response> apiV1NormalRegisterPostWithHttpInfo(String name, String email, String password, String mobileNo, String country, String state, String city, File photo) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalRegisterPostValidateBeforeCall(name, email, password, mobileNo, country, state, city, photo, null);
        Type localVarReturnType = new TypeToken<ApiV1NormalRegisterPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new user (asynchronously)
     * Registers a new user with provided details and optional profile photo.
     * @param name  (required)
     * @param email  (required)
     * @param password  (required)
     * @param mobileNo  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param photo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or photo upload failed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - User already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalRegisterPostAsync(String name, String email, String password, String mobileNo, String country, String state, String city, File photo, final ApiCallback<ApiV1NormalRegisterPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalRegisterPostValidateBeforeCall(name, email, password, mobileNo, country, state, city, photo, _callback);
        Type localVarReturnType = new TypeToken<ApiV1NormalRegisterPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalRequestPasswordResetPost
     * @param passwordResetRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalRequestPasswordResetPostCall(PasswordResetRequestDto passwordResetRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordResetRequestDto;

        // create path and map variables
        String localVarPath = "/api/v1/normal/request-password-reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalRequestPasswordResetPostValidateBeforeCall(PasswordResetRequestDto passwordResetRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passwordResetRequestDto' is set
        if (passwordResetRequestDto == null) {
            throw new ApiException("Missing the required parameter 'passwordResetRequestDto' when calling apiV1NormalRequestPasswordResetPost(Async)");
        }

        return apiV1NormalRequestPasswordResetPostCall(passwordResetRequestDto, _callback);

    }

    /**
     * Request Password Reset
     * Sends an OTP to the user&#39;s email for password reset.
     * @param passwordResetRequestDto  (required)
     * @return ApiV1NormalRequestPasswordResetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1NormalRequestPasswordResetPost200Response apiV1NormalRequestPasswordResetPost(PasswordResetRequestDto passwordResetRequestDto) throws ApiException {
        ApiResponse<ApiV1NormalRequestPasswordResetPost200Response> localVarResp = apiV1NormalRequestPasswordResetPostWithHttpInfo(passwordResetRequestDto);
        return localVarResp.getData();
    }

    /**
     * Request Password Reset
     * Sends an OTP to the user&#39;s email for password reset.
     * @param passwordResetRequestDto  (required)
     * @return ApiResponse&lt;ApiV1NormalRequestPasswordResetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1NormalRequestPasswordResetPost200Response> apiV1NormalRequestPasswordResetPostWithHttpInfo(PasswordResetRequestDto passwordResetRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalRequestPasswordResetPostValidateBeforeCall(passwordResetRequestDto, null);
        Type localVarReturnType = new TypeToken<ApiV1NormalRequestPasswordResetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request Password Reset (asynchronously)
     * Sends an OTP to the user&#39;s email for password reset.
     * @param passwordResetRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP sent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalRequestPasswordResetPostAsync(PasswordResetRequestDto passwordResetRequestDto, final ApiCallback<ApiV1NormalRequestPasswordResetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalRequestPasswordResetPostValidateBeforeCall(passwordResetRequestDto, _callback);
        Type localVarReturnType = new TypeToken<ApiV1NormalRequestPasswordResetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalResendOtpPost
     * @param passwordResetRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP resent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalResendOtpPostCall(PasswordResetRequestDto passwordResetRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordResetRequestDto;

        // create path and map variables
        String localVarPath = "/api/v1/normal/resend-otp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalResendOtpPostValidateBeforeCall(PasswordResetRequestDto passwordResetRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passwordResetRequestDto' is set
        if (passwordResetRequestDto == null) {
            throw new ApiException("Missing the required parameter 'passwordResetRequestDto' when calling apiV1NormalResendOtpPost(Async)");
        }

        return apiV1NormalResendOtpPostCall(passwordResetRequestDto, _callback);

    }

    /**
     * Resend OTP for Password Reset
     * Resends an OTP to the user&#39;s email for password reset.
     * @param passwordResetRequestDto  (required)
     * @return ApiV1NormalResendOtpPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP resent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1NormalResendOtpPost200Response apiV1NormalResendOtpPost(PasswordResetRequestDto passwordResetRequestDto) throws ApiException {
        ApiResponse<ApiV1NormalResendOtpPost200Response> localVarResp = apiV1NormalResendOtpPostWithHttpInfo(passwordResetRequestDto);
        return localVarResp.getData();
    }

    /**
     * Resend OTP for Password Reset
     * Resends an OTP to the user&#39;s email for password reset.
     * @param passwordResetRequestDto  (required)
     * @return ApiResponse&lt;ApiV1NormalResendOtpPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP resent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1NormalResendOtpPost200Response> apiV1NormalResendOtpPostWithHttpInfo(PasswordResetRequestDto passwordResetRequestDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalResendOtpPostValidateBeforeCall(passwordResetRequestDto, null);
        Type localVarReturnType = new TypeToken<ApiV1NormalResendOtpPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend OTP for Password Reset (asynchronously)
     * Resends an OTP to the user&#39;s email for password reset.
     * @param passwordResetRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OTP resent successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalResendOtpPostAsync(PasswordResetRequestDto passwordResetRequestDto, final ApiCallback<ApiV1NormalResendOtpPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalResendOtpPostValidateBeforeCall(passwordResetRequestDto, _callback);
        Type localVarReturnType = new TypeToken<ApiV1NormalResendOtpPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalResetPasswordPost
     * @param passwordResetVerifyDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password reset successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid OTP or validation errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalResetPasswordPostCall(PasswordResetVerifyDto passwordResetVerifyDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordResetVerifyDto;

        // create path and map variables
        String localVarPath = "/api/v1/normal/reset-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalResetPasswordPostValidateBeforeCall(PasswordResetVerifyDto passwordResetVerifyDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passwordResetVerifyDto' is set
        if (passwordResetVerifyDto == null) {
            throw new ApiException("Missing the required parameter 'passwordResetVerifyDto' when calling apiV1NormalResetPasswordPost(Async)");
        }

        return apiV1NormalResetPasswordPostCall(passwordResetVerifyDto, _callback);

    }

    /**
     * Reset Password
     * Resets the user&#39;s password using the provided OTP.
     * @param passwordResetVerifyDto  (required)
     * @return ApiV1NormalResetPasswordPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password reset successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid OTP or validation errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1NormalResetPasswordPost200Response apiV1NormalResetPasswordPost(PasswordResetVerifyDto passwordResetVerifyDto) throws ApiException {
        ApiResponse<ApiV1NormalResetPasswordPost200Response> localVarResp = apiV1NormalResetPasswordPostWithHttpInfo(passwordResetVerifyDto);
        return localVarResp.getData();
    }

    /**
     * Reset Password
     * Resets the user&#39;s password using the provided OTP.
     * @param passwordResetVerifyDto  (required)
     * @return ApiResponse&lt;ApiV1NormalResetPasswordPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password reset successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid OTP or validation errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1NormalResetPasswordPost200Response> apiV1NormalResetPasswordPostWithHttpInfo(PasswordResetVerifyDto passwordResetVerifyDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalResetPasswordPostValidateBeforeCall(passwordResetVerifyDto, null);
        Type localVarReturnType = new TypeToken<ApiV1NormalResetPasswordPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset Password (asynchronously)
     * Resets the user&#39;s password using the provided OTP.
     * @param passwordResetVerifyDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password reset successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid OTP or validation errors. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalResetPasswordPostAsync(PasswordResetVerifyDto passwordResetVerifyDto, final ApiCallback<ApiV1NormalResetPasswordPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalResetPasswordPostValidateBeforeCall(passwordResetVerifyDto, _callback);
        Type localVarReturnType = new TypeToken<ApiV1NormalResetPasswordPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NormalStatesCountryIdGet
     * @param countryId UUID of the country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of states retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid countryId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No states found for given country ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalStatesCountryIdGetCall(UUID countryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/normal/states/{countryId}"
            .replace("{" + "countryId" + "}", localVarApiClient.escapeString(countryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NormalStatesCountryIdGetValidateBeforeCall(UUID countryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryId' is set
        if (countryId == null) {
            throw new ApiException("Missing the required parameter 'countryId' when calling apiV1NormalStatesCountryIdGet(Async)");
        }

        return apiV1NormalStatesCountryIdGetCall(countryId, _callback);

    }

    /**
     * Get States by Country ID
     * Fetches a list of states for the specified country UUID.
     * @param countryId UUID of the country (required)
     * @return List&lt;State&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of states retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid countryId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No states found for given country ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<State> apiV1NormalStatesCountryIdGet(UUID countryId) throws ApiException {
        ApiResponse<List<State>> localVarResp = apiV1NormalStatesCountryIdGetWithHttpInfo(countryId);
        return localVarResp.getData();
    }

    /**
     * Get States by Country ID
     * Fetches a list of states for the specified country UUID.
     * @param countryId UUID of the country (required)
     * @return ApiResponse&lt;List&lt;State&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of states retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid countryId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No states found for given country ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<State>> apiV1NormalStatesCountryIdGetWithHttpInfo(UUID countryId) throws ApiException {
        okhttp3.Call localVarCall = apiV1NormalStatesCountryIdGetValidateBeforeCall(countryId, null);
        Type localVarReturnType = new TypeToken<List<State>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get States by Country ID (asynchronously)
     * Fetches a list of states for the specified country UUID.
     * @param countryId UUID of the country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of states retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid countryId parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No states found for given country ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NormalStatesCountryIdGetAsync(UUID countryId, final ApiCallback<List<State>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NormalStatesCountryIdGetValidateBeforeCall(countryId, _callback);
        Type localVarReturnType = new TypeToken<List<State>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedAddProductPicturePut
     * @param productId  (required)
     * @param photo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Picture added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedAddProductPicturePutCall(UUID productId, File photo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/protected/add-product-picture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarFormParams.put("productId", productId);
        }

        if (photo != null) {
            localVarFormParams.put("photo", photo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedAddProductPicturePutValidateBeforeCall(UUID productId, File photo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiV1ProtectedAddProductPicturePut(Async)");
        }

        // verify the required parameter 'photo' is set
        if (photo == null) {
            throw new ApiException("Missing the required parameter 'photo' when calling apiV1ProtectedAddProductPicturePut(Async)");
        }

        return apiV1ProtectedAddProductPicturePutCall(productId, photo, _callback);

    }

    /**
     * Add Product Picture
     * Adds a new picture to an existing product.
     * @param productId  (required)
     * @param photo  (required)
     * @return ApiV1ProtectedAddProductPicturePut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Picture added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ProtectedAddProductPicturePut200Response apiV1ProtectedAddProductPicturePut(UUID productId, File photo) throws ApiException {
        ApiResponse<ApiV1ProtectedAddProductPicturePut200Response> localVarResp = apiV1ProtectedAddProductPicturePutWithHttpInfo(productId, photo);
        return localVarResp.getData();
    }

    /**
     * Add Product Picture
     * Adds a new picture to an existing product.
     * @param productId  (required)
     * @param photo  (required)
     * @return ApiResponse&lt;ApiV1ProtectedAddProductPicturePut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Picture added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ProtectedAddProductPicturePut200Response> apiV1ProtectedAddProductPicturePutWithHttpInfo(UUID productId, File photo) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedAddProductPicturePutValidateBeforeCall(productId, photo, null);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedAddProductPicturePut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Product Picture (asynchronously)
     * Adds a new picture to an existing product.
     * @param productId  (required)
     * @param photo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Picture added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedAddProductPicturePutAsync(UUID productId, File photo, final ApiCallback<ApiV1ProtectedAddProductPicturePut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedAddProductPicturePutValidateBeforeCall(productId, photo, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedAddProductPicturePut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedAddProductPost
     * @param productName  (required)
     * @param category  (required)
     * @param description  (required)
     * @param price  (required)
     * @param tillDate  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param picture  (optional)
     * @param files  (optional)
     * @param active  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product added successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Product added, but some images failed to upload. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedAddProductPostCall(String productName, String category, String description, Double price, String tillDate, String country, String state, String city, File picture, List<File> files, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/protected/add-product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productName != null) {
            localVarFormParams.put("productName", productName);
        }

        if (category != null) {
            localVarFormParams.put("category", category);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (price != null) {
            localVarFormParams.put("price", price);
        }

        if (tillDate != null) {
            localVarFormParams.put("tillDate", tillDate);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (picture != null) {
            localVarFormParams.put("picture", picture);
        }

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedAddProductPostValidateBeforeCall(String productName, String category, String description, Double price, String tillDate, String country, String state, String city, File picture, List<File> files, Boolean active, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling apiV1ProtectedAddProductPost(Async)");
        }

        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling apiV1ProtectedAddProductPost(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling apiV1ProtectedAddProductPost(Async)");
        }

        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling apiV1ProtectedAddProductPost(Async)");
        }

        // verify the required parameter 'tillDate' is set
        if (tillDate == null) {
            throw new ApiException("Missing the required parameter 'tillDate' when calling apiV1ProtectedAddProductPost(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling apiV1ProtectedAddProductPost(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling apiV1ProtectedAddProductPost(Async)");
        }

        // verify the required parameter 'city' is set
        if (city == null) {
            throw new ApiException("Missing the required parameter 'city' when calling apiV1ProtectedAddProductPost(Async)");
        }

        return apiV1ProtectedAddProductPostCall(productName, category, description, price, tillDate, country, state, city, picture, files, active, _callback);

    }

    /**
     * Add a New Product
     * Adds a new product with details and optional images.
     * @param productName  (required)
     * @param category  (required)
     * @param description  (required)
     * @param price  (required)
     * @param tillDate  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param picture  (optional)
     * @param files  (optional)
     * @param active  (optional)
     * @return ApiV1ProtectedAddProductPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product added successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Product added, but some images failed to upload. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ProtectedAddProductPost201Response apiV1ProtectedAddProductPost(String productName, String category, String description, Double price, String tillDate, String country, String state, String city, File picture, List<File> files, Boolean active) throws ApiException {
        ApiResponse<ApiV1ProtectedAddProductPost201Response> localVarResp = apiV1ProtectedAddProductPostWithHttpInfo(productName, category, description, price, tillDate, country, state, city, picture, files, active);
        return localVarResp.getData();
    }

    /**
     * Add a New Product
     * Adds a new product with details and optional images.
     * @param productName  (required)
     * @param category  (required)
     * @param description  (required)
     * @param price  (required)
     * @param tillDate  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param picture  (optional)
     * @param files  (optional)
     * @param active  (optional)
     * @return ApiResponse&lt;ApiV1ProtectedAddProductPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product added successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Product added, but some images failed to upload. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ProtectedAddProductPost201Response> apiV1ProtectedAddProductPostWithHttpInfo(String productName, String category, String description, Double price, String tillDate, String country, String state, String city, File picture, List<File> files, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedAddProductPostValidateBeforeCall(productName, category, description, price, tillDate, country, state, city, picture, files, active, null);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedAddProductPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a New Product (asynchronously)
     * Adds a new product with details and optional images.
     * @param productName  (required)
     * @param category  (required)
     * @param description  (required)
     * @param price  (required)
     * @param tillDate  (required)
     * @param country  (required)
     * @param state  (required)
     * @param city  (required)
     * @param picture  (optional)
     * @param files  (optional)
     * @param active  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product added successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Product added, but some images failed to upload. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedAddProductPostAsync(String productName, String category, String description, Double price, String tillDate, String country, String state, String city, File picture, List<File> files, Boolean active, final ApiCallback<ApiV1ProtectedAddProductPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedAddProductPostValidateBeforeCall(productName, category, description, price, tillDate, country, state, city, picture, files, active, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedAddProductPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedDeleteProductDelete
     * @param productDetailsDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedDeleteProductDeleteCall(ProductDetailsDto productDetailsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productDetailsDto;

        // create path and map variables
        String localVarPath = "/api/v1/protected/delete-product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedDeleteProductDeleteValidateBeforeCall(ProductDetailsDto productDetailsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productDetailsDto' is set
        if (productDetailsDto == null) {
            throw new ApiException("Missing the required parameter 'productDetailsDto' when calling apiV1ProtectedDeleteProductDelete(Async)");
        }

        return apiV1ProtectedDeleteProductDeleteCall(productDetailsDto, _callback);

    }

    /**
     * Delete Product
     * Deletes a specific product and its associated pictures.
     * @param productDetailsDto  (required)
     * @return ApiV1ProtectedDeleteProductDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ProtectedDeleteProductDelete200Response apiV1ProtectedDeleteProductDelete(ProductDetailsDto productDetailsDto) throws ApiException {
        ApiResponse<ApiV1ProtectedDeleteProductDelete200Response> localVarResp = apiV1ProtectedDeleteProductDeleteWithHttpInfo(productDetailsDto);
        return localVarResp.getData();
    }

    /**
     * Delete Product
     * Deletes a specific product and its associated pictures.
     * @param productDetailsDto  (required)
     * @return ApiResponse&lt;ApiV1ProtectedDeleteProductDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ProtectedDeleteProductDelete200Response> apiV1ProtectedDeleteProductDeleteWithHttpInfo(ProductDetailsDto productDetailsDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedDeleteProductDeleteValidateBeforeCall(productDetailsDto, null);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedDeleteProductDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Product (asynchronously)
     * Deletes a specific product and its associated pictures.
     * @param productDetailsDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedDeleteProductDeleteAsync(ProductDetailsDto productDetailsDto, final ApiCallback<ApiV1ProtectedDeleteProductDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedDeleteProductDeleteValidateBeforeCall(productDetailsDto, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedDeleteProductDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedProductDetailsGet
     * @param productDetailsDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedProductDetailsGetCall(ProductDetailsDto productDetailsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productDetailsDto;

        // create path and map variables
        String localVarPath = "/api/v1/protected/product-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedProductDetailsGetValidateBeforeCall(ProductDetailsDto productDetailsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productDetailsDto' is set
        if (productDetailsDto == null) {
            throw new ApiException("Missing the required parameter 'productDetailsDto' when calling apiV1ProtectedProductDetailsGet(Async)");
        }

        return apiV1ProtectedProductDetailsGetCall(productDetailsDto, _callback);

    }

    /**
     * Get Product Details
     * Fetches details of a specific product.
     * @param productDetailsDto  (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Product apiV1ProtectedProductDetailsGet(ProductDetailsDto productDetailsDto) throws ApiException {
        ApiResponse<Product> localVarResp = apiV1ProtectedProductDetailsGetWithHttpInfo(productDetailsDto);
        return localVarResp.getData();
    }

    /**
     * Get Product Details
     * Fetches details of a specific product.
     * @param productDetailsDto  (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> apiV1ProtectedProductDetailsGetWithHttpInfo(ProductDetailsDto productDetailsDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedProductDetailsGetValidateBeforeCall(productDetailsDto, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Details (asynchronously)
     * Fetches details of a specific product.
     * @param productDetailsDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedProductDetailsGetAsync(ProductDetailsDto productDetailsDto, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedProductDetailsGetValidateBeforeCall(productDetailsDto, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedProductListGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No products found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedProductListGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/protected/product-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedProductListGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1ProtectedProductListGetCall(_callback);

    }

    /**
     * Get Product List
     * Fetches a list of all products.
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No products found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> apiV1ProtectedProductListGet() throws ApiException {
        ApiResponse<List<Product>> localVarResp = apiV1ProtectedProductListGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Product List
     * Fetches a list of all products.
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No products found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> apiV1ProtectedProductListGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedProductListGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product List (asynchronously)
     * Fetches a list of all products.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No products found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedProductListGetAsync(final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedProductListGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedProfileGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User profile retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedProfileGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/protected/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedProfileGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1ProtectedProfileGetCall(_callback);

    }

    /**
     * Get User Profile
     * Fetches the profile details of the authenticated user.
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User profile retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public User apiV1ProtectedProfileGet() throws ApiException {
        ApiResponse<User> localVarResp = apiV1ProtectedProfileGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get User Profile
     * Fetches the profile details of the authenticated user.
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User profile retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> apiV1ProtectedProfileGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedProfileGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Profile (asynchronously)
     * Fetches the profile details of the authenticated user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User profile retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedProfileGetAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedProfileGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedUpdatePasswordPut
     * @param updatePasswordDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or incorrect old password. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdatePasswordPutCall(UpdatePasswordDto updatePasswordDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePasswordDto;

        // create path and map variables
        String localVarPath = "/api/v1/protected/update-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedUpdatePasswordPutValidateBeforeCall(UpdatePasswordDto updatePasswordDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updatePasswordDto' is set
        if (updatePasswordDto == null) {
            throw new ApiException("Missing the required parameter 'updatePasswordDto' when calling apiV1ProtectedUpdatePasswordPut(Async)");
        }

        return apiV1ProtectedUpdatePasswordPutCall(updatePasswordDto, _callback);

    }

    /**
     * Update User Password
     * Updates the password of the authenticated user.
     * @param updatePasswordDto  (required)
     * @return ApiV1ProtectedUpdatePasswordPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or incorrect old password. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ProtectedUpdatePasswordPut200Response apiV1ProtectedUpdatePasswordPut(UpdatePasswordDto updatePasswordDto) throws ApiException {
        ApiResponse<ApiV1ProtectedUpdatePasswordPut200Response> localVarResp = apiV1ProtectedUpdatePasswordPutWithHttpInfo(updatePasswordDto);
        return localVarResp.getData();
    }

    /**
     * Update User Password
     * Updates the password of the authenticated user.
     * @param updatePasswordDto  (required)
     * @return ApiResponse&lt;ApiV1ProtectedUpdatePasswordPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or incorrect old password. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ProtectedUpdatePasswordPut200Response> apiV1ProtectedUpdatePasswordPutWithHttpInfo(UpdatePasswordDto updatePasswordDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedUpdatePasswordPutValidateBeforeCall(updatePasswordDto, null);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdatePasswordPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User Password (asynchronously)
     * Updates the password of the authenticated user.
     * @param updatePasswordDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors or incorrect old password. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdatePasswordPutAsync(UpdatePasswordDto updatePasswordDto, final ApiCallback<ApiV1ProtectedUpdatePasswordPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedUpdatePasswordPutValidateBeforeCall(updatePasswordDto, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdatePasswordPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedUpdateProductPut
     * @param updateProductDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdateProductPutCall(UpdateProductDto updateProductDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProductDto;

        // create path and map variables
        String localVarPath = "/api/v1/protected/update-product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedUpdateProductPutValidateBeforeCall(UpdateProductDto updateProductDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateProductDto' is set
        if (updateProductDto == null) {
            throw new ApiException("Missing the required parameter 'updateProductDto' when calling apiV1ProtectedUpdateProductPut(Async)");
        }

        return apiV1ProtectedUpdateProductPutCall(updateProductDto, _callback);

    }

    /**
     * Update Product Details
     * Updates the details of a specific product.
     * @param updateProductDto  (required)
     * @return ApiV1ProtectedUpdateProductPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ProtectedUpdateProductPut200Response apiV1ProtectedUpdateProductPut(UpdateProductDto updateProductDto) throws ApiException {
        ApiResponse<ApiV1ProtectedUpdateProductPut200Response> localVarResp = apiV1ProtectedUpdateProductPutWithHttpInfo(updateProductDto);
        return localVarResp.getData();
    }

    /**
     * Update Product Details
     * Updates the details of a specific product.
     * @param updateProductDto  (required)
     * @return ApiResponse&lt;ApiV1ProtectedUpdateProductPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ProtectedUpdateProductPut200Response> apiV1ProtectedUpdateProductPutWithHttpInfo(UpdateProductDto updateProductDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedUpdateProductPutValidateBeforeCall(updateProductDto, null);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdateProductPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Product Details (asynchronously)
     * Updates the details of a specific product.
     * @param updateProductDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdateProductPutAsync(UpdateProductDto updateProductDto, final ApiCallback<ApiV1ProtectedUpdateProductPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedUpdateProductPutValidateBeforeCall(updateProductDto, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdateProductPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedUpdateProfileDetailsPut
     * @param updateProfileDetailsDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile details updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdateProfileDetailsPutCall(UpdateProfileDetailsDto updateProfileDetailsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProfileDetailsDto;

        // create path and map variables
        String localVarPath = "/api/v1/protected/update-profile-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedUpdateProfileDetailsPutValidateBeforeCall(UpdateProfileDetailsDto updateProfileDetailsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateProfileDetailsDto' is set
        if (updateProfileDetailsDto == null) {
            throw new ApiException("Missing the required parameter 'updateProfileDetailsDto' when calling apiV1ProtectedUpdateProfileDetailsPut(Async)");
        }

        return apiV1ProtectedUpdateProfileDetailsPutCall(updateProfileDetailsDto, _callback);

    }

    /**
     * Update User Profile Details
     * Updates the profile details of the authenticated user.
     * @param updateProfileDetailsDto  (required)
     * @return ApiV1ProtectedUpdateProfileDetailsPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile details updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ProtectedUpdateProfileDetailsPut200Response apiV1ProtectedUpdateProfileDetailsPut(UpdateProfileDetailsDto updateProfileDetailsDto) throws ApiException {
        ApiResponse<ApiV1ProtectedUpdateProfileDetailsPut200Response> localVarResp = apiV1ProtectedUpdateProfileDetailsPutWithHttpInfo(updateProfileDetailsDto);
        return localVarResp.getData();
    }

    /**
     * Update User Profile Details
     * Updates the profile details of the authenticated user.
     * @param updateProfileDetailsDto  (required)
     * @return ApiResponse&lt;ApiV1ProtectedUpdateProfileDetailsPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile details updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ProtectedUpdateProfileDetailsPut200Response> apiV1ProtectedUpdateProfileDetailsPutWithHttpInfo(UpdateProfileDetailsDto updateProfileDetailsDto) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedUpdateProfileDetailsPutValidateBeforeCall(updateProfileDetailsDto, null);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdateProfileDetailsPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User Profile Details (asynchronously)
     * Updates the profile details of the authenticated user.
     * @param updateProfileDetailsDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile details updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Validation errors. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdateProfileDetailsPutAsync(UpdateProfileDetailsDto updateProfileDetailsDto, final ApiCallback<ApiV1ProtectedUpdateProfileDetailsPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedUpdateProfileDetailsPutValidateBeforeCall(updateProfileDetailsDto, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdateProfileDetailsPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ProtectedUpdateProfilePicturePut
     * @param photo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid photo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdateProfilePicturePutCall(File photo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/protected/update-profile-picture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (photo != null) {
            localVarFormParams.put("photo", photo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ProtectedUpdateProfilePicturePutValidateBeforeCall(File photo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'photo' is set
        if (photo == null) {
            throw new ApiException("Missing the required parameter 'photo' when calling apiV1ProtectedUpdateProfilePicturePut(Async)");
        }

        return apiV1ProtectedUpdateProfilePicturePutCall(photo, _callback);

    }

    /**
     * Update User Profile Picture
     * Updates the profile picture of the authenticated user.
     * @param photo  (required)
     * @return ApiV1ProtectedUpdateProfilePicturePut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid photo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1ProtectedUpdateProfilePicturePut200Response apiV1ProtectedUpdateProfilePicturePut(File photo) throws ApiException {
        ApiResponse<ApiV1ProtectedUpdateProfilePicturePut200Response> localVarResp = apiV1ProtectedUpdateProfilePicturePutWithHttpInfo(photo);
        return localVarResp.getData();
    }

    /**
     * Update User Profile Picture
     * Updates the profile picture of the authenticated user.
     * @param photo  (required)
     * @return ApiResponse&lt;ApiV1ProtectedUpdateProfilePicturePut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid photo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1ProtectedUpdateProfilePicturePut200Response> apiV1ProtectedUpdateProfilePicturePutWithHttpInfo(File photo) throws ApiException {
        okhttp3.Call localVarCall = apiV1ProtectedUpdateProfilePicturePutValidateBeforeCall(photo, null);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdateProfilePicturePut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User Profile Picture (asynchronously)
     * Updates the profile picture of the authenticated user.
     * @param photo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Profile picture updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing or invalid photo. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid or missing token. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ProtectedUpdateProfilePicturePutAsync(File photo, final ApiCallback<ApiV1ProtectedUpdateProfilePicturePut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ProtectedUpdateProfilePicturePutValidateBeforeCall(photo, _callback);
        Type localVarReturnType = new TypeToken<ApiV1ProtectedUpdateProfilePicturePut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
