/*
 * Application API
 * Application API for managing countries, states, cities, user authentication, profiles, and products.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-01T13:14:26.354376100+05:30[Asia/Calcutta]", comments = "Generator version: 7.7.0")
public class Product {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_UPLOADED_BY = "uploadedBy";
  @SerializedName(SERIALIZED_NAME_UPLOADED_BY)
  private UUID uploadedBy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DISCRIPTION = "discription";
  @SerializedName(SERIALIZED_NAME_DISCRIPTION)
  private String discription;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_TILL_DATE = "tillDate";
  @SerializedName(SERIALIZED_NAME_TILL_DATE)
  private String tillDate;

  public static final String SERIALIZED_NAME_FOR_COUNTRY = "forCountry";
  @SerializedName(SERIALIZED_NAME_FOR_COUNTRY)
  private String forCountry;

  public static final String SERIALIZED_NAME_FOR_STATE = "forState";
  @SerializedName(SERIALIZED_NAME_FOR_STATE)
  private String forState;

  public static final String SERIALIZED_NAME_FOR_CITY = "forCity";
  @SerializedName(SERIALIZED_NAME_FOR_CITY)
  private String forCity;

  public static final String SERIALIZED_NAME_PICTURE_URL = "pictureUrl";
  @SerializedName(SERIALIZED_NAME_PICTURE_URL)
  private String pictureUrl;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public Product() {
  }

  public Product id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Product uploadedBy(UUID uploadedBy) {
    this.uploadedBy = uploadedBy;
    return this;
  }

  /**
   * Get uploadedBy
   * @return uploadedBy
   */
  @javax.annotation.Nonnull
  public UUID getUploadedBy() {
    return uploadedBy;
  }

  public void setUploadedBy(UUID uploadedBy) {
    this.uploadedBy = uploadedBy;
  }


  public Product name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Product category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Product discription(String discription) {
    this.discription = discription;
    return this;
  }

  /**
   * Get discription
   * @return discription
   */
  @javax.annotation.Nonnull
  public String getDiscription() {
    return discription;
  }

  public void setDiscription(String discription) {
    this.discription = discription;
  }


  public Product price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public Product tillDate(String tillDate) {
    this.tillDate = tillDate;
    return this;
  }

  /**
   * Get tillDate
   * @return tillDate
   */
  @javax.annotation.Nonnull
  public String getTillDate() {
    return tillDate;
  }

  public void setTillDate(String tillDate) {
    this.tillDate = tillDate;
  }


  public Product forCountry(String forCountry) {
    this.forCountry = forCountry;
    return this;
  }

  /**
   * Get forCountry
   * @return forCountry
   */
  @javax.annotation.Nonnull
  public String getForCountry() {
    return forCountry;
  }

  public void setForCountry(String forCountry) {
    this.forCountry = forCountry;
  }


  public Product forState(String forState) {
    this.forState = forState;
    return this;
  }

  /**
   * Get forState
   * @return forState
   */
  @javax.annotation.Nonnull
  public String getForState() {
    return forState;
  }

  public void setForState(String forState) {
    this.forState = forState;
  }


  public Product forCity(String forCity) {
    this.forCity = forCity;
    return this;
  }

  /**
   * Get forCity
   * @return forCity
   */
  @javax.annotation.Nonnull
  public String getForCity() {
    return forCity;
  }

  public void setForCity(String forCity) {
    this.forCity = forCity;
  }


  public Product pictureUrl(String pictureUrl) {
    this.pictureUrl = pictureUrl;
    return this;
  }

  /**
   * Get pictureUrl
   * @return pictureUrl
   */
  @javax.annotation.Nonnull
  public String getPictureUrl() {
    return pictureUrl;
  }

  public void setPictureUrl(String pictureUrl) {
    this.pictureUrl = pictureUrl;
  }


  public Product active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.id, product.id) &&
        Objects.equals(this.uploadedBy, product.uploadedBy) &&
        Objects.equals(this.name, product.name) &&
        Objects.equals(this.category, product.category) &&
        Objects.equals(this.discription, product.discription) &&
        Objects.equals(this.price, product.price) &&
        Objects.equals(this.tillDate, product.tillDate) &&
        Objects.equals(this.forCountry, product.forCountry) &&
        Objects.equals(this.forState, product.forState) &&
        Objects.equals(this.forCity, product.forCity) &&
        Objects.equals(this.pictureUrl, product.pictureUrl) &&
        Objects.equals(this.active, product.active);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uploadedBy, name, category, discription, price, tillDate, forCountry, forState, forCity, pictureUrl, active);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uploadedBy: ").append(toIndentedString(uploadedBy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    discription: ").append(toIndentedString(discription)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    tillDate: ").append(toIndentedString(tillDate)).append("\n");
    sb.append("    forCountry: ").append(toIndentedString(forCountry)).append("\n");
    sb.append("    forState: ").append(toIndentedString(forState)).append("\n");
    sb.append("    forCity: ").append(toIndentedString(forCity)).append("\n");
    sb.append("    pictureUrl: ").append(toIndentedString(pictureUrl)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("uploadedBy");
    openapiFields.add("name");
    openapiFields.add("category");
    openapiFields.add("discription");
    openapiFields.add("price");
    openapiFields.add("tillDate");
    openapiFields.add("forCountry");
    openapiFields.add("forState");
    openapiFields.add("forCity");
    openapiFields.add("pictureUrl");
    openapiFields.add("active");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("uploadedBy");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("discription");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("tillDate");
    openapiRequiredFields.add("forCountry");
    openapiRequiredFields.add("forState");
    openapiRequiredFields.add("forCity");
    openapiRequiredFields.add("pictureUrl");
    openapiRequiredFields.add("active");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Product.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("uploadedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadedBy").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("discription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discription").toString()));
      }
      if (!jsonObj.get("tillDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tillDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tillDate").toString()));
      }
      if (!jsonObj.get("forCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forCountry").toString()));
      }
      if (!jsonObj.get("forState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forState").toString()));
      }
      if (!jsonObj.get("forCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forCity").toString()));
      }
      if (!jsonObj.get("pictureUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictureUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pictureUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

